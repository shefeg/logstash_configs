filter {
  if [service] == "apache" and [log_type] == "access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
      add_field => { "[@metadata][zabbix_host]" => "zserver" }
      add_field => { "[@metadata][zabbix_key]" => "response" }
    }
    date {
      match => [ "logdate" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
  }
  else if [service] == "apache" and [log_type] == "error" {
    grok {
      match => { "message" => "%{HTTPD24_ERRORLOG}" }
    }
    date {
      match => [ "logdate" , "EEE MMM dd HH:mm:ss.SSSSSS yyyy" ]
    }
  }
  else if [service] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}:%{GREEDYDATA:message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date {
      match => [ "logdate" , "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
  else if [service] == "rsyslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} \w* %{SYSLOGPROG:program} %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      remove_tag => [ "_grokparsefailure", "beats_input_codec_plain_applied" ]
    }
    date {
      match => [ "logdate" , "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}

